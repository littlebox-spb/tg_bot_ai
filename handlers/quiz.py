import services.gpt as gpt
import logging

logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logger = logging.getLogger(__name__)
TOPIC = ["–§–∏–∑–∏–∫–∞", "–ò—Å–∫—É—Å—Å—Ç–≤–æ", "–ò–¢", "–õ–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞"]
answerList = None
success = 0
fail = 0


def initQuiz():
    global success, fail, answerList
    success = 0
    fail = 0
    answerList = None


def startQuiz(mode):
    global answerList
    if not answerList:
        logger.info("–í–∏–∫—Ç–æ—Ä–∏–Ω–∞ GPT —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω–∞")
        request = [
            {
                "role": "system",
                "content": f"–¢—ã –æ–ø—ã—Ç–Ω—ã–π —Å–æ–∑–¥–∞—Ç–µ–ª—å –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã—Ö –≤–∏–∫—Ç–æ—Ä–∏–Ω. \
                                –¢—ã –¥–æ–ª–∂–µ–Ω –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –ø–æ —Ç–µ–º–µ {TOPIC[mode - 41]}, –∏ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å 4 –≤–∞—Ä–∏–∞–Ω—Ç–∞ –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –Ω–µ–≥–æ, \
                                –∏–∑ –∫–æ—Ç–æ—Ä—ã—Ö –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω. –í–æ–ø—Ä–æ—Å—ã –¥–æ–ª–∂–Ω—ã –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –∫ –†–ê–ó–ù–´–ú –∞—Å–ø–µ–∫—Ç–∞–º. –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –ù–ï –ü–û–ö–ê–ó–´–í–ê–¢–¨!\
                                –í–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω—ã –ø–æ—Å–ª–µ –≤–æ–ø—Ä–æ—Å–∞ –≤ –≤–∏–¥–µ –Ω—É–º–µ—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞.",
            },
            {
                "role": "user",
                "content": f"–ó–∞–¥–∞–π –º–Ω–µ –≤–æ–ø—Ä–æ—Å –ø–æ —Ç–µ–º–µ {TOPIC[mode - 41]}.",
            },
        ]
        logger.info(f"–ó–∞–ø—Ä–æ—Å —É—Å–ø–µ—à–Ω–æ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω. –¢–µ–º–∞ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã: {TOPIC[mode - 41]}")
        try:
            response = gpt.ask_gpt(request)
            logger.info("–í–æ–ø—Ä–æ—Å –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω")
            answerList = [a for a in response.split("\n") if len(a) > 4]
            answerList = [a[2:].strip() for a in answerList[1:]]
            return response
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤–æ–ø—Ä–æ—Å–∞ –æ—Ç OpenAI: {e}")
            return "üòï–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≤–æ–ø—Ä–æ—Å –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ!"


def quizAnswer(mode, answer):
    global answerList, success, fail
    if answerList:
        request = [
            {
                "role": "system",
                "content": f"–¢—ã –∑–∞–¥–∞–ª –≤–æ–ø—Ä–æ—Å {answerList[0]} –ø–æ —Ç–µ–º–µ {TOPIC[mode - 41]}. \
                –¢–µ–ø–µ—Ä—å —Ç—ã –¥–æ–ª–∂–µ–Ω –æ—Ç–≤–µ—Ç–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –Ω–∞–ø–∏—Å–∞—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ–Ω –æ—Ç–≤–µ—Ç–∏–ª –∏–ª–∏ –Ω–µ—Ç. \
                –ü–µ—Ä–≤–æ–µ —Å–ª–æ–≤–æ –≤ –æ—Ç–≤–µ—Ç–µ –î–û–õ–ñ–ù–û –±—ã—Ç—å '–ü—Ä–∞–≤–∏–ª—å–Ω–æ' –∏–ª–∏ '–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ'.",
            },
            {
                "role": "user",
                "content": f"–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å –ø–æ —Ç–µ–º–µ {TOPIC[mode - 41]} - {answerList[int(answer)]}.",
            },
        ]
        logger.info("–û—Ç–≤–µ—Ç —É—Å–ø–µ—à–Ω–æ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω")
        try:
            response = gpt.ask_gpt(request)
            logger.info("–û—Ç–≤–µ—Ç –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω")
            if response == "–ü—Ä–∞–≤–∏–ª—å–Ω–æ.":
                success += 1
            else:
                fail += 1
            return (
                response
                + f"\n–ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: {success}\n–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: {fail}"
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç–≤–µ—Ç–∞ –æ—Ç OpenAI: {e}")
            return "üòï–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ!"
        finally:
            answerList = None
    else:
        return "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞."
