import services.gpt as gpt
import logging

logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logger = logging.getLogger(__name__)
words = []
gen = None
testWord = ""
success = 0


def getWorld():
    request = [
        {
            "role": "system",
            "content": f"–¢—ã —É—á–∏—Ç–µ–ª—å –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ —è–∑—ã–∫–∞. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ –¥–∞—Ç—å —É—á–µ–Ω–∏–∫—É —Å–ª–æ–≤–æ —Å –ø—Ä–∏–º–µ—Ä–∞–º–∏ –µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è. \
                –ù–∞–ø–∏—à–∏ —Å–ª–æ–≤–æ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ, –∞ –ø–æ—Å–ª–µ –ø–µ—Ä–µ–≤–æ–¥ —Å–ª–æ–≤–∞ –∏ –ø—Ä–∏–º–µ—Ä—ã –µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è. –°–ª–æ–≤–∞ –Ω–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∏–∑ —Å–ø–∏—Å–∫–∞ {words}. \
                –ù–µ –∏—Å–ø–æ–ª—å–∑—É–π –Ω–∏–∫–æ–≥–æ –æ–±—Ä–∞–º–ª–µ–Ω–∏—è —Å–ª–æ–≤–∞ —Å–∏–º–≤–æ–ª–∞–º–∏.",
        },
        {
            "role": "user",
            "content": "–î–∞–π –º–Ω–µ —Å–ª–æ–≤–æ –¥–ª—è –∑–∞—É—á–∏–≤–∞–Ω–∏—è —Å –ø–µ—Ä–µ–≤–æ–¥–æ–º –∏ –ø—Ä–∏–º–µ—Ä–∞–º–∏.",
        },
    ]
    logger.info("–ó–∞–ø—Ä–æ—Å —É—Å–ø–µ—à–Ω–æ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω")
    try:
        response = gpt.ask_gpt(request)
        words.append(response[:50].split()[0])
        logger.info(f"–û—Ç–≤–µ—Ç —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω, —Å–ª–æ–≤–æ {words[-1]} –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ —Å–ø–∏—Å–æ–∫")
        return response
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ª–æ–≤–∞ –æ—Ç OpenAI: {e}")
        return "üòï–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ª–æ–≤–æ –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–π—Ç–∏ –ø–æ–∑–∂–µ!"


def statistics():
    return f"–í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–≤–µ—Ç–∏–ª–∏ –Ω–∞ {success} –≤–æ–ø—Ä–æ—Å–æ–≤ –∏–∑ {len(words)}."


def wordsGeneration():
    for word in words:
        yield word


def question():
    global gen, success, testWord
    if gen is None:
        gen = wordsGeneration()
        success = 0
    testWord = next(gen)
    return f"–ö–∞–∫ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—Å—è —Å–ª–æ–≤–æ {testWord}?"


def testWords(prompt):
    global success
    request = [
        {
            "role": "system",
            "content": "–¢—ã —É—á–∏—Ç–µ–ª—å –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ —è–∑—ã–∫–∞. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–Ω–∞–Ω–∏—è —É—á–µ–Ω–∏–∫–∞. –û—Ç–≤–µ—á–∞–π —Ç–æ–ª—å–∫–æ –¥–∞ –∏–ª–∏ –Ω–µ—Ç.",
        },
        {
            "role": "user",
            "content": f"–°–∫–∞–∂–∏, –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ª–∏ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—Å—è —Å–ª–æ–≤–æ {testWord} –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π —è–∑—ã–∫ - {prompt}.",
        },
    ]
    logger.info("–ó–∞–ø—Ä–æ—Å —É—Å–ø–µ—à–Ω–æ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω")
    try:
        response = gpt.ask_gpt(request)
        logger.info("–û—Ç–≤–µ—Ç —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω")
        if "–¥–∞" in response.lower():
            success += 1
        return question()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç–≤–µ—Ç–∞ –æ—Ç OpenAI: {e}")
        return "üòï–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–¥–∞—Ç—å –≤–∞—à –≤–æ–ø—Ä–æ—Å –ø–æ–∑–∂–µ!"
